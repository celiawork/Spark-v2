package com.sparkies.spark.model;

import javax.persistence.*;

import java.util.List;
import java.util.Set;

/**
 * Address Entity for SQL table 'ADRESSE'
 */
@Entity
@Inheritance(strategy = InheritanceType.JOINED)
@Table(name = "ADDRESS")
public class Address {

    /**
     * id : "id_adresse"
     * type : long
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_address", nullable = false)  // AutoIncremental
    private long idAdress;

    /**
     * 'number' -> 'NUMERO'
     * Max length of 50 'car' (default) && NULLABLE = TRUE
     * (ex: parking can have an address without number)
     * _String for composed numbers, type '2Bis'
     */
    @Column(name = "NUMBER", length = 50)
    private String number;

    /**
     * 'road' -> 'RUE'
     * Max length of 100 'car' && not NULL
     */
    @Column(name = "STREET", length = 100, nullable = false)
    private String street;

    /**
     * 'postalCode' -> 'CODE_POSTAL'
     * int && not NULL
     * _Five digit for FR
     */
    @Column(name = "POSTCODE", nullable = false)
    private int postcode;

    /**
     * 'city' -> 'VILLE'
     * Max length of 100 'car' && not NULL
     */
    @Column(name = "CITY", length = 100, nullable = false)
    private String city;

    /**
     * 'latitude' -> 'LATITUDE'
     * Float && NULLABLE = TRUE
     * (Unlike 'Parking' address, 'Users' address may not have GPS info)
     * _Generic format for latitude
     */
    @Column(name = "LATITUDE")
    private Double latitude;

    /**
     * 'longitude' -> 'LONGITUDE'
     * Float && NULLABLE = TRUE
     * (Unlike 'Parking' address, 'Users' address may not have GPS info)
     * _Generic format for latitude
     */
    @Column(name = "LONGITUDE")
    private Double longitude;

    /**
     * 'country' -> 'PAYS'
     * Max length of 255 'car' && not NULL
     * (
     */
    @Column(name = "COUNTRY", length = 255, nullable = false)
    private String country;

    /**
     * Map to 'Parking' Entity
     */
    @OneToOne(mappedBy = "parkingAddress")
    private Parking parking;

    /**
     * Map to 'User' Entity
     */
//    @OneToMany(mappedBy = "personnalAddress")
//    private Set<AppUser> users;
    
    
    @ManyToMany(mappedBy = "addressFavorite")
    private List<AppUser> userFavorite;

    /**
     * Default constructor
     */
    public Address() {
        // TODO AUTOGENERATED

    }

	public long getIdAdress() {
		return idAdress;
	}

	public void setIdAdress(long idAdress) {
		this.idAdress = idAdress;
	}

	public String getNumber() {
		return number;
	}

	public void setNumber(String number) {
		this.number = number;
	}

	public String getStreet() {
		return street;
	}

	public void setStreet(String street) {
		this.street = street;
	}

	public int getPostcode() {
		return postcode;
	}

	public void setPostcode(int postcode) {
		this.postcode = postcode;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public Double getLatitude() {
		return latitude;
	}

	public void setLatitude(Double latitude) {
		this.latitude = latitude;
	}

	public Double getLongitude() {
		return longitude;
	}

	public void setLongitude(Double longitude) {
		this.longitude = longitude;
	}

	public String getCountry() {
		return country;
	}

	public void setCountry(String country) {
		this.country = country;
	}

	public Parking getParking() {
		return parking;
	}

	public void setParking(Parking parking) {
		this.parking = parking;
	}

//	public Set<AppUser> getUsers() {
//		return users;
//	}
//
//	public void setUsers(Set<AppUser> users) {
//		this.users = users;
//	}



}
